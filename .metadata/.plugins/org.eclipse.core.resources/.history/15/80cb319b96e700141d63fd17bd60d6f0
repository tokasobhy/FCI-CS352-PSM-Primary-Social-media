package com.FCI.SWE.Page;

//import java.util.Date;
import java.util.List;
//import java.util.Vector;

/*import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;*/


import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import com.FCI.SWE.Models.User;
//import com.FCI.SWE.Controller.CurrentUser;
import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;
//import com.google.appengine.api.datastore.EntityNotFoundException;
import com.google.appengine.api.datastore.FetchOptions;
//import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.PreparedQuery;
import com.google.appengine.api.datastore.Query;
import com.google.appengine.api.datastore.Transaction;


public class Page {
		public String pageName;
		public String pageOwner;
		public String category;
		public String type;
		public int numOfLikes;
		
		
		public Page(String pageName,String pageOwner, String category, String type,
				int numOfLikes) {
			super();
			this.pageName = pageName;
			this.pageOwner = pageOwner;
			this.category = category;
			this.type = type;
			this.numOfLikes = numOfLikes;
		}


		public String getPageOwner() {
			return pageOwner;
		}


		public void setPageOwner(String pageOwner) {
			this.pageOwner = pageOwner;
		}


		public String getPageName() {
			return pageName;
		}


		public void setPageName(String pageName) {
			this.pageName = pageName;
		}


		public String getCategory() {
			return category;
		}


		public void setCategory(String category) {
			this.category = category;
		}


		public String getType() {
			return type;
		}


		public void setType(String type) {
			this.type = type;
		}


		public int getNumOfLikes() {
			return numOfLikes;
		}


		public void setNumOfLikes(int numOfLikes) {
			this.numOfLikes = numOfLikes;
		}
		
		/**
		 * Add Rest Service, this service will be called to make createPage process
		 * also will check posts data and returns String
		 */
		
		public boolean createPage(){
			DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
			Transaction txn = datastore.beginTransaction();
			Query gaeQuery = new Query("page");
			PreparedQuery pq = datastore.prepare(gaeQuery);
			List<Entity> list = pq.asList(FetchOptions.Builder.withDefaults());
			
			try{
			Entity employee = new Entity("page", list.size() + 1);
			
			employee.setProperty("pageName",this.pageName );
			employee.setProperty("pageOwner",this.pageOwner );
			employee.setProperty("category", this.category);
			employee.setProperty("type", this.type);
			employee.setProperty("numberOfLikes", this.numOfLikes);
			datastore.put(employee);
			txn.commit();
			}finally{
			if (txn.isActive()) {
		        txn.rollback();
		      
		    }
		}
			return true;
		}
		
//----------------------------------------------------------------------------------------
		/**
		 * this method converting from jison Type to Page type
		 * @param json 
		 * 			provided by jison which i need to convert
		 * @return Page 
		 * 			provided the page after converted
		 */
		public static Page getPage(String json) {

			JSONParser parser = new JSONParser();
			try {
				JSONObject object = (JSONObject) parser.parse(json);
				Page page = new Page(object.get("pageName").toString(), object.get(
						"pageOwner").toString(), object.get("category").toString(),object.get("type").toString(),(Integer.parseInt(object.get("numOfLikes").toString())));
				return page;
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return null;

		}
//-------------------------------------------------------------------------------------------------
	public static Page getSpecificPage(String PageName){ 
		
		return null;
	}
		
		
		
		
		
}
